AWSTemplateFormatVersion: '2010-09-09'
Description: Despliegue de una aplicación Java en una instancia EC2

Parameters:
  UbuntuAMI:
    Description: Imagen del Sistema Operativo Ubuntu
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/canonical/ubuntu/server/20.04/stable/current/amd64/hvm/ebs-gp2/ami-id'
  SSHKeyName:
    Description: Par clave-valor
    Type: AWS::EC2::KeyPair::KeyName
    Default: vockey
  InstanceSize:
    Description: Tamaño de la instancia EC2
    Type: String
    Default: t2.small
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
    ConstraintDescription: Tipos de instancia válidos
  SSHAllowed:
    Description: Rango de direcciones IP que pueden acceder por SSH a las instancias EC2
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: Debe ser un rango IP CIDR válido en la forma x.x.x.x/x.

Resources:
  ApplicationInstance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
        Count: '1'
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          full_install:
            - install_and_enable_cfn_hup
        install_and_enable_cfn_hup:
          files:
            "/etc/cfn/cfn-hup.conf":
              content:
                Fn::Join:
                  - ''
                  - - "[main]\n"
                    - "stack="
                    - Ref: AWS::StackId
                    - "\n"
                    - "region="
                    - Ref: AWS::Region
                    - "\n"
              mode: '000400'
              owner: root
              group: root
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content:
                Fn::Join:
                  - ''
                  - - "[cfn-auto-reloader-hook]\n"
                    - "triggers=post.update\n"
                    - "path=Resources.ApplicationInstance.Metadata.AWS::CloudFormation::Init\n"
                    - "action=/opt/aws/bin/cfn-init -v"
                    - "--stack "
                    - Ref: AWS::StackName
                    - " --resource ApplicationInstance"
                    - " --configsets full_install"
                    - " --region "
                    - Ref: AWS::Region
                    - "\n"
                    - "runas=root"
            "/lib/systemd/system/cfn-hup.service":
              content:
                Fn::Join:
                  - ''
                  - - "[Unit]\n"
                    - "Description=cfn-hup daemon\n\n"
                    - "[Service]\n"
                    - "Type=simple\n"
                    - "ExecStart=/opt/aws/bin/cfn-hup\n"
                    - "Restart=always\n\n"
                    - "[Install]\n"
                    - "WantedBy=multi-user.target"
          commands:
            01enable_cfn_hup:
              command: systemctl enable cfn-hup.service
            02start_cfn_hup:
              command: systemctl start cfn-hup.service
    Properties:
      InstanceType: !Ref InstanceSize
      SecurityGroups:
        - Ref: InstanceSecurityGroup
      KeyName: !Ref SSHKeyName
      IamInstanceProfile: "ApplicationInstanceProfile"
      Monitoring: true
      ImageId: !Ref UbuntuAMI
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          exec > /tmp/userdata.log 2>&1
          # Actualizar todas las aplicaciones
          apt update -y
          # Instalar unzip y CodeDeploy
          apt install unzip
          apt install ruby-full -y
          apt install wget -y
          # Navegar al directorio ubuntu
          cd /home/ubuntu
          wget https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install
          # Permisos de ejecucion
          chmod +x ./install
          ./install auto > /tmp/logfile
          service codedeploy-agent start
          # Instalar los scripts de ayuda de AWS CloudFormation
          mkdir -p /opt/aws/bin
          wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz
          python3 -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-py3-latest.tar.gz
          ln -s /root/aws-cfn-bootstrap-latest/init/ubuntu/cfn-hup /etc/init.d/cfn-hup
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ApplicationInstance --configsets full_install --region ${AWS::Region}
          sleep 1
          # Agregar un usuario para Tomcat
          useradd -m -d /opt/tomcat -U -s /bin/false tomcat
          # Actualizar el sistema
          apt update
          # Instalar Java
          apt install openjdk-17-jdk -y
          java -version
          # Navegar al directorio /tmp
          cd /tmp
          # Descargar el archivo usando wget
          wget https://dlcdn.apache.org/tomcat/tomcat-10/v10.1.18/bin/apache-tomcat-10.1.18.tar.gz
          # Extraerlo
          tar xzvf apache-tomcat-10*tar.gz -C /opt/tomcat --strip-components=1
          # Cambiar los permisos del propietario
          chown -R tomcat:tomcat /opt/tomcat/
          # Cambiar los permisos del directorio
          chmod -R u+x /opt/tomcat/bin
          # Agregar usuarios para acceder a la interfaz de administración de Tomcat
          cat << 'EOF' | tee /opt/tomcat/conf/tomcat-users.xml > /dev/null
          <?xml version='1.0' encoding='utf-8'?>
          <tomcat-users>
            <role rolename="manager-gui" />
            <user username="manager" password="manager_password" roles="manager-gui" />
            <role rolename="admin-gui" />
            <user username="admin" password="admin_password" roles="manager-gui,admin-gui" />
          </tomcat-users>
          EOF
          # Editar el archivo de configuración del Manager
          cat << 'EOF' | tee /opt/tomcat/webapps/manager/META-INF/context.xml > /dev/null
          <?xml version="1.0" encoding="UTF-8"?>
          <Context antiResourceLocking="false" privileged="true" >
            <CookieProcessor className="org.apache.tomcat.util.http.Rfc6265CookieProcessor" sameSiteCookies="strict" />
          </Context>
          EOF
          # Guardar y cerrar el archivo, luego repetir el proceso para el Host Manager
          cat << 'EOF' | tee /opt/tomcat/webapps/host-manager/META-INF/context.xml > /dev/null
          <?xml version="1.0" encoding="UTF-8"?>
          <Context antiResourceLocking="false" privileged="true" >
            <CookieProcessor className="org.apache.tomcat.util.http.Rfc6265CookieProcessor" sameSiteCookies="strict" />
          </Context>
          EOF
          # Crear un servicio systemd para Tomcat
          JAVA_HOME_PATH=$(update-java-alternatives -l | awk '{print $3}')
          CATALINA_HOME="/opt/tomcat"
          cat <<EOF | tee /etc/systemd/system/tomcat.service > /dev/null
          [Unit]
          Description=Tomcat
          After=network.target
          [Service]
          Type=forking
          User=tomcat
          Group=tomcat
          Environment="JAVA_HOME=$JAVA_HOME_PATH"
          Environment="JAVA_OPTS=-Djava.security.egd=file:///dev/urandom"
          Environment="CATALINA_BASE=$CATALINA_HOME"
          Environment="CATALINA_HOME=$CATALINA_HOME"
          Environment="CATALINA_PID=$CATALINA_HOME/temp/tomcat.pid"
          Environment="CATALINA_OPTS=-Xms512M -Xmx1024M -server -XX:+UseParallelGC"
          ExecStart=$CATALINA_HOME/bin/startup.sh
          ExecStop=$CATALINA_HOME/bin/shutdown.sh
          RestartSec=10
          Restart=always
          [Install]
          WantedBy=multi-user.target
          EOF
          # Recargar el daemon de systemd
          systemctl daemon-reload
          # Iniciar el servicio Tomcat
          systemctl start tomcat
          # Comprobar el estado de Tomcat
          systemctl status tomcat
          # Habilitar Tomcat para iniciar con el sistema
          systemctl enable tomcat
          # Instalar git
          apt install git -y
          # Navegar al directorio /tmp
          cd /tmp
          # Clonar el repositorio de la aplicación
          git clone https://github.com/Diegobrls/Tomcatv2
          # Navegar al directorio de la aplicación
          cd  Tomcatv2/springholamundo
          # Hacer el archivo gradlew ejecutable y compilar
          chmod +x gradlew
          ./gradlew war
          # Copiar el archivo war a la carpeta webapps de Tomcat
          mv build/libs/HolaMundo.war /opt/tomcat/webapps
          # Esta tiene que ser la última instrucción
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ApplicationInstance --region ${AWS::Region}

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Acceso SSH y web en el puerto 8080
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHAllowed
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: !Ref SSHAllowed
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

Outputs:
  PublicIPAddress:
    Description: La dirección IP pública de la instancia EC2
    Value: !Sub "http://${ApplicationInstance.PublicIp}:8080"
    Export:
      Name: PublicIPAddress

